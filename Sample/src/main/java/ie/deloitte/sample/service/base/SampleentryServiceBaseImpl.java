package ie.deloitte.sample.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.service.BaseServiceImpl;
import com.liferay.portal.service.persistence.UserPersistence;

import ie.deloitte.sample.model.Sampleentry;
import ie.deloitte.sample.service.SampleentryService;
import ie.deloitte.sample.service.persistence.SamplebookPersistence;
import ie.deloitte.sample.service.persistence.SampleentryPersistence;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the sampleentry remote service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ie.deloitte.sample.service.impl.SampleentryServiceImpl}.
 * </p>
 *
 * @author JY
 * @see ie.deloitte.sample.service.impl.SampleentryServiceImpl
 * @see ie.deloitte.sample.service.SampleentryServiceUtil
 * @generated
 */
public abstract class SampleentryServiceBaseImpl extends BaseServiceImpl
    implements SampleentryService, IdentifiableBean {
    @BeanReference(type = ie.deloitte.sample.service.SamplebookLocalService.class)
    protected ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService;
    @BeanReference(type = SamplebookPersistence.class)
    protected SamplebookPersistence samplebookPersistence;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryLocalService.class)
    protected ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryService.class)
    protected ie.deloitte.sample.service.SampleentryService sampleentryService;
    @BeanReference(type = SampleentryPersistence.class)
    protected SampleentryPersistence sampleentryPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private SampleentryServiceClpInvoker _clpInvoker = new SampleentryServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ie.deloitte.sample.service.SampleentryServiceUtil} to access the sampleentry remote service.
     */

    /**
     * Returns the samplebook local service.
     *
     * @return the samplebook local service
     */
    public ie.deloitte.sample.service.SamplebookLocalService getSamplebookLocalService() {
        return samplebookLocalService;
    }

    /**
     * Sets the samplebook local service.
     *
     * @param samplebookLocalService the samplebook local service
     */
    public void setSamplebookLocalService(
        ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService) {
        this.samplebookLocalService = samplebookLocalService;
    }

    /**
     * Returns the samplebook persistence.
     *
     * @return the samplebook persistence
     */
    public SamplebookPersistence getSamplebookPersistence() {
        return samplebookPersistence;
    }

    /**
     * Sets the samplebook persistence.
     *
     * @param samplebookPersistence the samplebook persistence
     */
    public void setSamplebookPersistence(
        SamplebookPersistence samplebookPersistence) {
        this.samplebookPersistence = samplebookPersistence;
    }

    /**
     * Returns the sampleentry local service.
     *
     * @return the sampleentry local service
     */
    public ie.deloitte.sample.service.SampleentryLocalService getSampleentryLocalService() {
        return sampleentryLocalService;
    }

    /**
     * Sets the sampleentry local service.
     *
     * @param sampleentryLocalService the sampleentry local service
     */
    public void setSampleentryLocalService(
        ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService) {
        this.sampleentryLocalService = sampleentryLocalService;
    }

    /**
     * Returns the sampleentry remote service.
     *
     * @return the sampleentry remote service
     */
    public ie.deloitte.sample.service.SampleentryService getSampleentryService() {
        return sampleentryService;
    }

    /**
     * Sets the sampleentry remote service.
     *
     * @param sampleentryService the sampleentry remote service
     */
    public void setSampleentryService(
        ie.deloitte.sample.service.SampleentryService sampleentryService) {
        this.sampleentryService = sampleentryService;
    }

    /**
     * Returns the sampleentry persistence.
     *
     * @return the sampleentry persistence
     */
    public SampleentryPersistence getSampleentryPersistence() {
        return sampleentryPersistence;
    }

    /**
     * Sets the sampleentry persistence.
     *
     * @param sampleentryPersistence the sampleentry persistence
     */
    public void setSampleentryPersistence(
        SampleentryPersistence sampleentryPersistence) {
        this.sampleentryPersistence = sampleentryPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();
    }

    public void destroy() {
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Sampleentry.class;
    }

    protected String getModelClassName() {
        return Sampleentry.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = sampleentryPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
