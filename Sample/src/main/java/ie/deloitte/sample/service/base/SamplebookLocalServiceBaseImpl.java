package ie.deloitte.sample.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ie.deloitte.sample.model.Samplebook;
import ie.deloitte.sample.service.SamplebookLocalService;
import ie.deloitte.sample.service.persistence.SamplebookPersistence;
import ie.deloitte.sample.service.persistence.SampleentryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the samplebook local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ie.deloitte.sample.service.impl.SamplebookLocalServiceImpl}.
 * </p>
 *
 * @author JY
 * @see ie.deloitte.sample.service.impl.SamplebookLocalServiceImpl
 * @see ie.deloitte.sample.service.SamplebookLocalServiceUtil
 * @generated
 */
public abstract class SamplebookLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements SamplebookLocalService,
        IdentifiableBean {
    @BeanReference(type = ie.deloitte.sample.service.SamplebookLocalService.class)
    protected ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService;
    @BeanReference(type = SamplebookPersistence.class)
    protected SamplebookPersistence samplebookPersistence;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryLocalService.class)
    protected ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryService.class)
    protected ie.deloitte.sample.service.SampleentryService sampleentryService;
    @BeanReference(type = SampleentryPersistence.class)
    protected SampleentryPersistence sampleentryPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private SamplebookLocalServiceClpInvoker _clpInvoker = new SamplebookLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ie.deloitte.sample.service.SamplebookLocalServiceUtil} to access the samplebook local service.
     */

    /**
     * Adds the samplebook to the database. Also notifies the appropriate model listeners.
     *
     * @param samplebook the samplebook
     * @return the samplebook that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Samplebook addSamplebook(Samplebook samplebook)
        throws SystemException {
        samplebook.setNew(true);

        return samplebookPersistence.update(samplebook);
    }

    /**
     * Creates a new samplebook with the primary key. Does not add the samplebook to the database.
     *
     * @param guestbookId the primary key for the new samplebook
     * @return the new samplebook
     */
    @Override
    public Samplebook createSamplebook(long guestbookId) {
        return samplebookPersistence.create(guestbookId);
    }

    /**
     * Deletes the samplebook with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param guestbookId the primary key of the samplebook
     * @return the samplebook that was removed
     * @throws PortalException if a samplebook with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Samplebook deleteSamplebook(long guestbookId)
        throws PortalException, SystemException {
        return samplebookPersistence.remove(guestbookId);
    }

    /**
     * Deletes the samplebook from the database. Also notifies the appropriate model listeners.
     *
     * @param samplebook the samplebook
     * @return the samplebook that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Samplebook deleteSamplebook(Samplebook samplebook)
        throws SystemException {
        return samplebookPersistence.remove(samplebook);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Samplebook.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return samplebookPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SamplebookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return samplebookPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SamplebookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return samplebookPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return samplebookPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return samplebookPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Samplebook fetchSamplebook(long guestbookId)
        throws SystemException {
        return samplebookPersistence.fetchByPrimaryKey(guestbookId);
    }

    /**
     * Returns the samplebook with the matching UUID and company.
     *
     * @param uuid the samplebook's UUID
     * @param  companyId the primary key of the company
     * @return the matching samplebook, or <code>null</code> if a matching samplebook could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Samplebook fetchSamplebookByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return samplebookPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the samplebook matching the UUID and group.
     *
     * @param uuid the samplebook's UUID
     * @param groupId the primary key of the group
     * @return the matching samplebook, or <code>null</code> if a matching samplebook could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Samplebook fetchSamplebookByUuidAndGroupId(String uuid, long groupId)
        throws SystemException {
        return samplebookPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the samplebook with the primary key.
     *
     * @param guestbookId the primary key of the samplebook
     * @return the samplebook
     * @throws PortalException if a samplebook with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Samplebook getSamplebook(long guestbookId)
        throws PortalException, SystemException {
        return samplebookPersistence.findByPrimaryKey(guestbookId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return samplebookPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the samplebook with the matching UUID and company.
     *
     * @param uuid the samplebook's UUID
     * @param  companyId the primary key of the company
     * @return the matching samplebook
     * @throws PortalException if a matching samplebook could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Samplebook getSamplebookByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return samplebookPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the samplebook matching the UUID and group.
     *
     * @param uuid the samplebook's UUID
     * @param groupId the primary key of the group
     * @return the matching samplebook
     * @throws PortalException if a matching samplebook could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Samplebook getSamplebookByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return samplebookPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the samplebooks.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SamplebookModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of samplebooks
     * @param end the upper bound of the range of samplebooks (not inclusive)
     * @return the range of samplebooks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Samplebook> getSamplebooks(int start, int end)
        throws SystemException {
        return samplebookPersistence.findAll(start, end);
    }

    /**
     * Returns the number of samplebooks.
     *
     * @return the number of samplebooks
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getSamplebooksCount() throws SystemException {
        return samplebookPersistence.countAll();
    }

    /**
     * Updates the samplebook in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param samplebook the samplebook
     * @return the samplebook that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Samplebook updateSamplebook(Samplebook samplebook)
        throws SystemException {
        return samplebookPersistence.update(samplebook);
    }

    /**
     * Returns the samplebook local service.
     *
     * @return the samplebook local service
     */
    public ie.deloitte.sample.service.SamplebookLocalService getSamplebookLocalService() {
        return samplebookLocalService;
    }

    /**
     * Sets the samplebook local service.
     *
     * @param samplebookLocalService the samplebook local service
     */
    public void setSamplebookLocalService(
        ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService) {
        this.samplebookLocalService = samplebookLocalService;
    }

    /**
     * Returns the samplebook persistence.
     *
     * @return the samplebook persistence
     */
    public SamplebookPersistence getSamplebookPersistence() {
        return samplebookPersistence;
    }

    /**
     * Sets the samplebook persistence.
     *
     * @param samplebookPersistence the samplebook persistence
     */
    public void setSamplebookPersistence(
        SamplebookPersistence samplebookPersistence) {
        this.samplebookPersistence = samplebookPersistence;
    }

    /**
     * Returns the sampleentry local service.
     *
     * @return the sampleentry local service
     */
    public ie.deloitte.sample.service.SampleentryLocalService getSampleentryLocalService() {
        return sampleentryLocalService;
    }

    /**
     * Sets the sampleentry local service.
     *
     * @param sampleentryLocalService the sampleentry local service
     */
    public void setSampleentryLocalService(
        ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService) {
        this.sampleentryLocalService = sampleentryLocalService;
    }

    /**
     * Returns the sampleentry remote service.
     *
     * @return the sampleentry remote service
     */
    public ie.deloitte.sample.service.SampleentryService getSampleentryService() {
        return sampleentryService;
    }

    /**
     * Sets the sampleentry remote service.
     *
     * @param sampleentryService the sampleentry remote service
     */
    public void setSampleentryService(
        ie.deloitte.sample.service.SampleentryService sampleentryService) {
        this.sampleentryService = sampleentryService;
    }

    /**
     * Returns the sampleentry persistence.
     *
     * @return the sampleentry persistence
     */
    public SampleentryPersistence getSampleentryPersistence() {
        return sampleentryPersistence;
    }

    /**
     * Sets the sampleentry persistence.
     *
     * @param sampleentryPersistence the sampleentry persistence
     */
    public void setSampleentryPersistence(
        SampleentryPersistence sampleentryPersistence) {
        this.sampleentryPersistence = sampleentryPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("ie.deloitte.sample.model.Samplebook",
            samplebookLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "ie.deloitte.sample.model.Samplebook");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Samplebook.class;
    }

    protected String getModelClassName() {
        return Samplebook.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = samplebookPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
