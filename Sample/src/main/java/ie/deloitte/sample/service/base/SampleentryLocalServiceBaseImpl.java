package ie.deloitte.sample.service.base;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.BaseLocalServiceImpl;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.persistence.UserPersistence;

import ie.deloitte.sample.model.Sampleentry;
import ie.deloitte.sample.service.SampleentryLocalService;
import ie.deloitte.sample.service.persistence.SamplebookPersistence;
import ie.deloitte.sample.service.persistence.SampleentryPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the sampleentry local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link ie.deloitte.sample.service.impl.SampleentryLocalServiceImpl}.
 * </p>
 *
 * @author JY
 * @see ie.deloitte.sample.service.impl.SampleentryLocalServiceImpl
 * @see ie.deloitte.sample.service.SampleentryLocalServiceUtil
 * @generated
 */
public abstract class SampleentryLocalServiceBaseImpl
    extends BaseLocalServiceImpl implements SampleentryLocalService,
        IdentifiableBean {
    @BeanReference(type = ie.deloitte.sample.service.SamplebookLocalService.class)
    protected ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService;
    @BeanReference(type = SamplebookPersistence.class)
    protected SamplebookPersistence samplebookPersistence;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryLocalService.class)
    protected ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService;
    @BeanReference(type = ie.deloitte.sample.service.SampleentryService.class)
    protected ie.deloitte.sample.service.SampleentryService sampleentryService;
    @BeanReference(type = SampleentryPersistence.class)
    protected SampleentryPersistence sampleentryPersistence;
    @BeanReference(type = com.liferay.counter.service.CounterLocalService.class)
    protected com.liferay.counter.service.CounterLocalService counterLocalService;
    @BeanReference(type = com.liferay.portal.service.ResourceLocalService.class)
    protected com.liferay.portal.service.ResourceLocalService resourceLocalService;
    @BeanReference(type = com.liferay.portal.service.UserLocalService.class)
    protected com.liferay.portal.service.UserLocalService userLocalService;
    @BeanReference(type = com.liferay.portal.service.UserService.class)
    protected com.liferay.portal.service.UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;
    private ClassLoader _classLoader;
    private SampleentryLocalServiceClpInvoker _clpInvoker = new SampleentryLocalServiceClpInvoker();

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link ie.deloitte.sample.service.SampleentryLocalServiceUtil} to access the sampleentry local service.
     */

    /**
     * Adds the sampleentry to the database. Also notifies the appropriate model listeners.
     *
     * @param sampleentry the sampleentry
     * @return the sampleentry that was added
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Sampleentry addSampleentry(Sampleentry sampleentry)
        throws SystemException {
        sampleentry.setNew(true);

        return sampleentryPersistence.update(sampleentry);
    }

    /**
     * Creates a new sampleentry with the primary key. Does not add the sampleentry to the database.
     *
     * @param entryId the primary key for the new sampleentry
     * @return the new sampleentry
     */
    @Override
    public Sampleentry createSampleentry(long entryId) {
        return sampleentryPersistence.create(entryId);
    }

    /**
     * Deletes the sampleentry with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param entryId the primary key of the sampleentry
     * @return the sampleentry that was removed
     * @throws PortalException if a sampleentry with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Sampleentry deleteSampleentry(long entryId)
        throws PortalException, SystemException {
        return sampleentryPersistence.remove(entryId);
    }

    /**
     * Deletes the sampleentry from the database. Also notifies the appropriate model listeners.
     *
     * @param sampleentry the sampleentry
     * @return the sampleentry that was removed
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.DELETE)
    @Override
    public Sampleentry deleteSampleentry(Sampleentry sampleentry)
        throws SystemException {
        return sampleentryPersistence.remove(sampleentry);
    }

    @Override
    public DynamicQuery dynamicQuery() {
        Class<?> clazz = getClass();

        return DynamicQueryFactoryUtil.forClass(Sampleentry.class,
            clazz.getClassLoader());
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return sampleentryPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SampleentryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return sampleentryPersistence.findWithDynamicQuery(dynamicQuery, start,
            end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SampleentryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @Override
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return sampleentryPersistence.findWithDynamicQuery(dynamicQuery, start,
            end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return sampleentryPersistence.countWithDynamicQuery(dynamicQuery);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @param projection the projection to apply to the query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    @Override
    public long dynamicQueryCount(DynamicQuery dynamicQuery,
        Projection projection) throws SystemException {
        return sampleentryPersistence.countWithDynamicQuery(dynamicQuery,
            projection);
    }

    @Override
    public Sampleentry fetchSampleentry(long entryId) throws SystemException {
        return sampleentryPersistence.fetchByPrimaryKey(entryId);
    }

    /**
     * Returns the sampleentry with the matching UUID and company.
     *
     * @param uuid the sampleentry's UUID
     * @param  companyId the primary key of the company
     * @return the matching sampleentry, or <code>null</code> if a matching sampleentry could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Sampleentry fetchSampleentryByUuidAndCompanyId(String uuid,
        long companyId) throws SystemException {
        return sampleentryPersistence.fetchByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the sampleentry matching the UUID and group.
     *
     * @param uuid the sampleentry's UUID
     * @param groupId the primary key of the group
     * @return the matching sampleentry, or <code>null</code> if a matching sampleentry could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Sampleentry fetchSampleentryByUuidAndGroupId(String uuid,
        long groupId) throws SystemException {
        return sampleentryPersistence.fetchByUUID_G(uuid, groupId);
    }

    /**
     * Returns the sampleentry with the primary key.
     *
     * @param entryId the primary key of the sampleentry
     * @return the sampleentry
     * @throws PortalException if a sampleentry with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Sampleentry getSampleentry(long entryId)
        throws PortalException, SystemException {
        return sampleentryPersistence.findByPrimaryKey(entryId);
    }

    @Override
    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return sampleentryPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns the sampleentry with the matching UUID and company.
     *
     * @param uuid the sampleentry's UUID
     * @param  companyId the primary key of the company
     * @return the matching sampleentry
     * @throws PortalException if a matching sampleentry could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Sampleentry getSampleentryByUuidAndCompanyId(String uuid,
        long companyId) throws PortalException, SystemException {
        return sampleentryPersistence.findByUuid_C_First(uuid, companyId, null);
    }

    /**
     * Returns the sampleentry matching the UUID and group.
     *
     * @param uuid the sampleentry's UUID
     * @param groupId the primary key of the group
     * @return the matching sampleentry
     * @throws PortalException if a matching sampleentry could not be found
     * @throws SystemException if a system exception occurred
     */
    @Override
    public Sampleentry getSampleentryByUuidAndGroupId(String uuid, long groupId)
        throws PortalException, SystemException {
        return sampleentryPersistence.findByUUID_G(uuid, groupId);
    }

    /**
     * Returns a range of all the sampleentries.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link ie.deloitte.sample.model.impl.SampleentryModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
     * </p>
     *
     * @param start the lower bound of the range of sampleentries
     * @param end the upper bound of the range of sampleentries (not inclusive)
     * @return the range of sampleentries
     * @throws SystemException if a system exception occurred
     */
    @Override
    public List<Sampleentry> getSampleentries(int start, int end)
        throws SystemException {
        return sampleentryPersistence.findAll(start, end);
    }

    /**
     * Returns the number of sampleentries.
     *
     * @return the number of sampleentries
     * @throws SystemException if a system exception occurred
     */
    @Override
    public int getSampleentriesCount() throws SystemException {
        return sampleentryPersistence.countAll();
    }

    /**
     * Updates the sampleentry in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param sampleentry the sampleentry
     * @return the sampleentry that was updated
     * @throws SystemException if a system exception occurred
     */
    @Indexable(type = IndexableType.REINDEX)
    @Override
    public Sampleentry updateSampleentry(Sampleentry sampleentry)
        throws SystemException {
        return sampleentryPersistence.update(sampleentry);
    }

    /**
     * Returns the samplebook local service.
     *
     * @return the samplebook local service
     */
    public ie.deloitte.sample.service.SamplebookLocalService getSamplebookLocalService() {
        return samplebookLocalService;
    }

    /**
     * Sets the samplebook local service.
     *
     * @param samplebookLocalService the samplebook local service
     */
    public void setSamplebookLocalService(
        ie.deloitte.sample.service.SamplebookLocalService samplebookLocalService) {
        this.samplebookLocalService = samplebookLocalService;
    }

    /**
     * Returns the samplebook persistence.
     *
     * @return the samplebook persistence
     */
    public SamplebookPersistence getSamplebookPersistence() {
        return samplebookPersistence;
    }

    /**
     * Sets the samplebook persistence.
     *
     * @param samplebookPersistence the samplebook persistence
     */
    public void setSamplebookPersistence(
        SamplebookPersistence samplebookPersistence) {
        this.samplebookPersistence = samplebookPersistence;
    }

    /**
     * Returns the sampleentry local service.
     *
     * @return the sampleentry local service
     */
    public ie.deloitte.sample.service.SampleentryLocalService getSampleentryLocalService() {
        return sampleentryLocalService;
    }

    /**
     * Sets the sampleentry local service.
     *
     * @param sampleentryLocalService the sampleentry local service
     */
    public void setSampleentryLocalService(
        ie.deloitte.sample.service.SampleentryLocalService sampleentryLocalService) {
        this.sampleentryLocalService = sampleentryLocalService;
    }

    /**
     * Returns the sampleentry remote service.
     *
     * @return the sampleentry remote service
     */
    public ie.deloitte.sample.service.SampleentryService getSampleentryService() {
        return sampleentryService;
    }

    /**
     * Sets the sampleentry remote service.
     *
     * @param sampleentryService the sampleentry remote service
     */
    public void setSampleentryService(
        ie.deloitte.sample.service.SampleentryService sampleentryService) {
        this.sampleentryService = sampleentryService;
    }

    /**
     * Returns the sampleentry persistence.
     *
     * @return the sampleentry persistence
     */
    public SampleentryPersistence getSampleentryPersistence() {
        return sampleentryPersistence;
    }

    /**
     * Sets the sampleentry persistence.
     *
     * @param sampleentryPersistence the sampleentry persistence
     */
    public void setSampleentryPersistence(
        SampleentryPersistence sampleentryPersistence) {
        this.sampleentryPersistence = sampleentryPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public com.liferay.counter.service.CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(
        com.liferay.counter.service.CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public com.liferay.portal.service.ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        com.liferay.portal.service.ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public com.liferay.portal.service.UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(
        com.liferay.portal.service.UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public com.liferay.portal.service.UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(
        com.liferay.portal.service.UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        Class<?> clazz = getClass();

        _classLoader = clazz.getClassLoader();

        PersistedModelLocalServiceRegistryUtil.register("ie.deloitte.sample.model.Sampleentry",
            sampleentryLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "ie.deloitte.sample.model.Sampleentry");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    @Override
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    @Override
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    @Override
    public Object invokeMethod(String name, String[] parameterTypes,
        Object[] arguments) throws Throwable {
        Thread currentThread = Thread.currentThread();

        ClassLoader contextClassLoader = currentThread.getContextClassLoader();

        if (contextClassLoader != _classLoader) {
            currentThread.setContextClassLoader(_classLoader);
        }

        try {
            return _clpInvoker.invokeMethod(name, parameterTypes, arguments);
        } finally {
            if (contextClassLoader != _classLoader) {
                currentThread.setContextClassLoader(contextClassLoader);
            }
        }
    }

    protected Class<?> getModelClass() {
        return Sampleentry.class;
    }

    protected String getModelClassName() {
        return Sampleentry.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = sampleentryPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
